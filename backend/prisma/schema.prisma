generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["authentication", "messaging", "public", "tenant"]
}

model user {
  user_id              String        @id(map: "user_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String        @unique(map: "user_unique") @db.VarChar
  fullname             String        @db.VarChar
  password_hash        String        @db.VarChar
  created_at           DateTime      @default(now()) @db.Timestamptz(6)
  updated_at           DateTime      @default(now()) @db.Timestamptz(6)
  user_security_secret String        @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone_number         String?       @db.VarChar
  nickname             String        @db.VarChar
  tenant_user          tenant_user[]

  @@schema("authentication")
}

model tenant {
  tenant_id    String        @id(map: "tenant_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_name  String        @unique(map: "tenant_unique") @db.VarChar
  address      String?       @db.VarChar
  phone_number String?       @db.VarChar
  description  String        @db.VarChar
  tenant_user  tenant_user[]

  @@schema("tenant")
}

model tenant_user {
  tenant_user_id String   @id(map: "tenant_user_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id      String   @db.Uuid
  user_id        String   @db.Uuid
  role           String   @db.VarChar
  created_at     DateTime @db.Timestamptz(6)
  tenant         tenant   @relation(fields: [tenant_id], references: [tenant_id], onUpdate: Restrict, map: "tenant_user_tenant_fk")
  user           user     @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "tenant_user_user_fk")

  @@unique([tenant_id, user_id], map: "tenant_user_unique")
  @@schema("tenant")
}

model discord {
  discord_id         String          @id(map: "discord_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discord_channel_id String          @db.Uuid
  username           String          @db.VarChar
  message            String          @db.VarChar
  created_at         DateTime        @default(now()) @db.Timestamptz(6)
  processed_at       DateTime?       @db.Timestamptz(6)
  error_message      String?         @db.VarChar
  discord_channel    discord_channel @relation(fields: [discord_channel_id], references: [discord_channel_id], onUpdate: Restrict, map: "discord_discord_channel_fk")

  @@schema("messaging")
}

model discord_channel {
  discord_channel_id   String    @id(map: "discord_channel_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discord_channel_name String    @unique(map: "discord_channel_unique") @db.VarChar
  webhook_url          String    @db.VarChar
  discord              discord[]

  @@schema("messaging")
}

model email {
  email_id            String         @id(map: "email_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  from_address        String         @db.VarChar
  to_addresses        String[]       @db.VarChar
  cc_addresses        String[]       @default([]) @db.VarChar
  bcc_addresses       String[]       @default([]) @db.VarChar
  attachments         Json[]         @default([])
  reply_to_address    String         @db.VarChar
  priority            String         @db.VarChar
  headers             Json           @default("{}")
  email_template_id   String         @db.Uuid
  email_template_data Json           @default("{}")
  schedule_send_time  DateTime       @default(now()) @db.Timestamptz(6)
  processed_at        DateTime?      @db.Timestamptz(6)
  error_message       String?        @db.VarChar
  email_template      email_template @relation(fields: [email_template_id], references: [email_template_id], onUpdate: Restrict, map: "email_email_template_fk")

  @@index([processed_at])
  @@schema("messaging")
}

model email_template {
  email_template_id String  @id(map: "email_template_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String  @db.VarChar
  subject_template  String
  content_template  String
  language          String  @db.VarChar
  email             email[]

  @@unique([name, language], map: "email_template_unique")
  @@schema("messaging")
}

enum tenant_role {
  ADMIN
  DOCTOR
  PHARMACIST

  @@schema("tenant")
}
